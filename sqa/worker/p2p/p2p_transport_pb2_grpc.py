# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sqa.worker.p2p.p2p_transport_pb2 as p2p__transport__pb2


class P2PTransportStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LocalPeerId = channel.unary_unary(
                '/p2p_transport.P2PTransport/LocalPeerId',
                request_serializer=p2p__transport__pb2.Empty.SerializeToString,
                response_deserializer=p2p__transport__pb2.PeerId.FromString,
                )
        self.GetMessages = channel.unary_stream(
                '/p2p_transport.P2PTransport/GetMessages',
                request_serializer=p2p__transport__pb2.Empty.SerializeToString,
                response_deserializer=p2p__transport__pb2.Message.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/p2p_transport.P2PTransport/SendMessage',
                request_serializer=p2p__transport__pb2.Message.SerializeToString,
                response_deserializer=p2p__transport__pb2.Empty.FromString,
                )
        self.ToggleSubscription = channel.unary_unary(
                '/p2p_transport.P2PTransport/ToggleSubscription',
                request_serializer=p2p__transport__pb2.Subscription.SerializeToString,
                response_deserializer=p2p__transport__pb2.Empty.FromString,
                )


class P2PTransportServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LocalPeerId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ToggleSubscription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_P2PTransportServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LocalPeerId': grpc.unary_unary_rpc_method_handler(
                    servicer.LocalPeerId,
                    request_deserializer=p2p__transport__pb2.Empty.FromString,
                    response_serializer=p2p__transport__pb2.PeerId.SerializeToString,
            ),
            'GetMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMessages,
                    request_deserializer=p2p__transport__pb2.Empty.FromString,
                    response_serializer=p2p__transport__pb2.Message.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=p2p__transport__pb2.Message.FromString,
                    response_serializer=p2p__transport__pb2.Empty.SerializeToString,
            ),
            'ToggleSubscription': grpc.unary_unary_rpc_method_handler(
                    servicer.ToggleSubscription,
                    request_deserializer=p2p__transport__pb2.Subscription.FromString,
                    response_serializer=p2p__transport__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'p2p_transport.P2PTransport', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class P2PTransport(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LocalPeerId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/p2p_transport.P2PTransport/LocalPeerId',
            p2p__transport__pb2.Empty.SerializeToString,
            p2p__transport__pb2.PeerId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/p2p_transport.P2PTransport/GetMessages',
            p2p__transport__pb2.Empty.SerializeToString,
            p2p__transport__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/p2p_transport.P2PTransport/SendMessage',
            p2p__transport__pb2.Message.SerializeToString,
            p2p__transport__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ToggleSubscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/p2p_transport.P2PTransport/ToggleSubscription',
            p2p__transport__pb2.Subscription.SerializeToString,
            p2p__transport__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
